---
import { Breadcrumbs } from 'astro-breadcrumbs';
import { getEntry } from 'astro:content';

import getPathFromSlug from '../utils/get-path-from-slug.ts';
export interface Props {
  slug: string;
}
const { slug } = Astro.props;
const parentSlugs = slug
  .split('/')
  .map((_slugPart, index, slugParts) =>
    slugParts.slice(0, index + 1).join('/'),
  );
const crumbs = [
  {
    text: 'Головна',
    href: '/',
  },
  ...(await Promise.all(
    parentSlugs.map(async (slug) => {
      let text;
      try {
        const entry = await getEntry('processed-content', slug);
        if (!entry) {
          throw new Error(`No entry found for slug: ${slug}/`);
        }
        text = entry.data.title;
      } catch (error) {
        if (
          typeof (error as { message: string })?.message === 'string' &&
          (error as { message: string }).message.includes(
            'No entry found for slug:',
          )
        ) {
          return {
            href: getPathFromSlug(slug),
            className: 'c-breadcrumbs__link wd-nav-link-not-translated',
            rel: 'noopener noreferrer',
            target: '_blank',
            text: slug,
          };
        } else {
          throw error;
        }
      }
      return {
        href: getPathFromSlug(slug),
        text: text,
      };
    }),
  )),
];
---

<Breadcrumbs ariaLabel="Хлібні крихти" crumbs={crumbs} trailingSlash={true}
  ><svg
    slot="separator"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    ><polyline points="9 18 15 12 9 6"></polyline>
  </svg></Breadcrumbs
>
<style is:global lang="scss">
  /* stylelint-disable selector-class-pattern */
  .c-breadcrumbs__crumbs {
    column-gap: 0;
    padding: 8px 16px !important;

    .c-breadcrumbs__crumb {
      @apply w-full md:w-auto justify-between;

      &:first-child,
      &:last-child {
        @apply hidden lg:flex;
      }
    }

    a {
      @apply min-h-12 lg:min-h-0 flex lg:inline items-center;

      // @media (width >= 1024px) {
      //   @apply min-h-0;
      // }

      &:hover {
        color: var(--color-ui-primary);

        &.wd-nav-link-not-translated {
          color: red;
        }
      }
    }

    .wd-nav-link-not-translated {
      color: red;
    }
  }
  /* stylelint-enable selector-class-pattern */
</style>
